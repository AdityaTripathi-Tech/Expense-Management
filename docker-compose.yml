version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-odoo}
      POSTGRES_USER: ${POSTGRES_USER:-odoo}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-odoo}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - odoo_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-odoo}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Odoo Application
  odoo:
    image: odoo:17.0
    depends_on:
      db:
        condition: service_healthy
    environment:
      - HOST=db
      - USER=${POSTGRES_USER:-odoo}
      - PASSWORD=${POSTGRES_PASSWORD:-odoo}
      - POSTGRES_DB=${POSTGRES_DB:-odoo}
    volumes:
      - ./smart_expense_management:/mnt/extra-addons/smart_expense_management
      - ./odoo.conf:/etc/odoo/odoo.conf
      - odoo_data:/var/lib/odoo
      - ./logs:/var/log/odoo
    ports:
      - "8069:8069"
    networks:
      - odoo_network
    command: >
      bash -c "
        pip install requests pytesseract Pillow google-cloud-vision &&
        odoo -i smart_expense_management -d ${POSTGRES_DB:-odoo} --without-demo=False
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8069/web/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis (Optional - for caching and session management)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - odoo_network
    command: redis-server --appendonly yes

  # Mock API Server (for testing)
  mock_server:
    build:
      context: .
      dockerfile: Dockerfile.mock
    ports:
      - "8080:8080"
    volumes:
      - ./smart_expense_management/tests/fixtures:/app/fixtures
    networks:
      - odoo_network
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
    profiles:
      - testing

  # Nginx (Optional - for production deployment)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - odoo
    networks:
      - odoo_network
    profiles:
      - production

volumes:
  postgres_data:
  odoo_data:
  redis_data:

networks:
  odoo_network:
    driver: bridge
